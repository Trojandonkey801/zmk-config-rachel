#include <behaviors/mouse_key_press.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        u_combo_base {
            bindings = <&to 1>;
            key-positions = <10 11>;
        };

        u_combo_esc {
            bindings = <&kp ESC>;
            key-positions = <24 35>;
        };

        u_combo_extra {
            bindings = <&to 0>;
            key-positions = <23 22>;
        };

        u_combo_zoom {
            bindings = <&u_macro_app_zoom>;
            key-positions = <6 7>;
        };

        u_combo_zoom_mic {
            bindings = <&u_macro_app_zoom_mic>;
            key-positions = <18 19>;
        };

        u_combo_zoom_end {
            bindings = <&u_macro_app_zoom_end>;
            key-positions = <31 30>;
        };

        u_combo_angle_open {
            bindings = <&kp LT>;
            key-positions = <32 31>;
        };

        u_combo_angle_close {
            bindings = <&kp GT>;
            key-positions = <32 33>;
        };

        u_combo_playpause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <25 27>;
        };

        u_combo_volup {
            bindings = <&kp C_VOL_UP>;
            key-positions = <10 22>;
        };

        u_combo_voldown {
            bindings = <&kp C_VOL_DN>;
            key-positions = <22 34>;
        };

        u_combo_left {
            bindings = <&kp LEFT>;
            key-positions = <30 32>;
        };

        u_combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <33 31>;
        };

        u_combo_up {
            bindings = <&kp UP>;
            key-positions = <19 20 21>;
        };

        u_combo_down {
            bindings = <&kp DOWN>;
            key-positions = <31 32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        EXTRA {
            label = "Extra";
            bindings = <
&u_mt ESC GRAVE  &kp Q      &kp W  &kp E             &kp R             &kp T          &kp Y        &kp U              &kp I              &kp O           &kp P             &kp BACKSPACE
&u_caps_word     &kp A      &kp S  &u_mt LEFT_ALT D  &u_mt LEFT_GUI F  &kp G          &kp H        &u_mt RIGHT_GUI J  &u_mt RIGHT_ALT K  &kp L           &u_mt AMPS SQT    &u_mt AT EQUAL
&sk LEFT_SHIFT   &u_lt 6 Z  &kp X  &kp C             &kp V             &kp B          &kp N        &kp M              &u_mt BSLH COMMA   &u_mt SEMI DOT  &u_mt EXCL QMARK  &sk RCTRL
                                   &sk LEFT_GUI      &u_lt 4 SPACE     &u_lt 5 TAB    &u_lt 2 RET  &u_lt 3 BSPC       &u_lt 6 DEL
            >;
        };

        BASE {
            label = "Base";
            bindings = <
&u_mt ESC GRAVE  &kp Q      &kp W  &kp F             &kp P          &kp B          &kp J        &kp L         &kp U              &kp Y           &mt AMPS SQT    &kp BACKSPACE
&u_caps_word     &kp A      &kp R  &u_mt LEFT_ALT S  &kp T          &kp G          &kp M        &kp N         &u_mt RIGHT_ALT E  &kp I           &kp O           &mt AT EQUAL
&sk LEFT_SHIFT   &u_lt 6 Z  &kp X  &kp C             &kp D          &kp V          &kp K        &kp H         &u_mt BSLH COMMA   &u_mt SEMI DOT  &mt EXCL QMARK  &sk RIGHT_CONTROL
                                   &sk LEFT_GUI      &u_lt 4 SPACE  &u_lt 5 TAB    &u_lt 2 RET  &u_lt 3 BSPC  &u_lt 6 DEL
            >;
        };

        SYM {
            label = "Sym";
            bindings = <
&none  &kp LBRC   &kp AMPS  &kp ASTRK          &kp BSLH                &kp RBRC     &u_macro_curly_brackets  &kp LBKT         &kp C          &kp RBKT                  &bootloader      &kp DEL
&none  &kp COLON  &kp DLLR  &kp PRCNT          &kp CARET               &kp PLUS     &u_macro_sq_brackets     &u_mt LGUI LPAR  &kp RIGHT_ALT  &u_mt RIGHT_CONTROL RPAR  &kp RIGHT_SHIFT  &none
&none  &kp TILDE  &kp EXCL  &kp AT             &kp HASH                &kp PIPE     &u_macro_single_quotes   &none            &none          &kp RALT                  &none            &none
                            &u_macro_brackets  &u_macro_double_quotes  &kp UNDER    &none                    &none            &none
            >;
        };

        NUM {
            label = "Num";
            bindings = <
&none  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &none  &u_to_U_BASE   &u_to_U_EXTRA  &none              &bootloader      &kp DEL
&none  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &none  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &none
&none  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp SLASH    &none  &u_to_U_NUM    &u_to_U_NAV    &kp RALT           &none            &none
                          &kp DOT  &kp N0  &kp MINUS    &none  &none          &none
            >;
        };

        NAV {
            label = "Nav";
            bindings = <
&none  &bootloader     &none             &kp LA(LS(UP_ARROW))  &u_to_U_BASE       &kp END    &kp HOME   &none          &kp UP         &none              &none             &none
&none  &none           &kp LA(LS(LEFT))  &kp LA(LS(DOWN))      &kp LA(LS(RIGHT))  &none      &kp PG_UP  &kp LEFT       &kp DOWN       &kp RIGHT          &kp RA(RG(LEFT))  &kp RA(RG(RIGHT))
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT          &kp LEFT_GUI       &none      &kp PG_DN  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RSHIFT        &none
                                         &none                 &none              &none      &kp RET    &kp BSPC       &kp DEL
            >;
        };

        MEDIA {
            label = "Media";
            bindings = <
&none  &bootloader     &none             &u_to_U_EXTRA  &u_to_U_BASE   &none    &u_out_tog         &none        &kp C_VOL_UP  &none        &none        &none
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT   &kp LEFT_GUI   &none    &ext_power EP_TOG  &kp C_PREV   &kp C_VOL_DN  &kp C_NEXT   &none        &none
&none  &none           &kp RALT          &u_to_U_FUN    &u_to_U_MEDIA  &none    &u_bt_sel_0        &u_bt_sel_1  &u_bt_sel_2   &u_bt_sel_3  &u_bt_sel_4  &none
                                         &none          &none          &none    &kp C_STOP         &kp C_PP     &kp C_MUTE
            >;
        };

        FUN {
            label = "Fun";
            bindings = <
&none  &bootloader    &u_macro_screenshot_all  &u_macro_screenshot         &u_macro_screenshot_clipboard  &u_macro_screenshot_clipb_all    &none  &kp F7  &kp F8  &kp F9  &kp F12  &bootloader
&none  &none          &u_macro_string_ctask    &u_macro_string_work_email  &u_macro_select_all_copy       &u_macro_select_all_cut          &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &u_macro_undo  &u_macro_cut             &u_macro_copy               &u_macro_redo                  &u_macro_paste                   &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
                                               &none                       &kp SPACE                      &kp TAB                          &none  &none   &none
            >;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_0: u_macro_u_bt_sel_0 {
            label = "ZM_u_macro_u_bt_sel_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_0: u_bt_sel_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_0";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&u_macro_u_bt_sel_0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_1: u_macro_u_bt_sel_1 {
            label = "ZM_u_macro_u_bt_sel_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_1: u_bt_sel_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_1";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>, <&u_macro_u_bt_sel_1>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_2: u_macro_u_bt_sel_2 {
            label = "ZM_u_macro_u_bt_sel_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_2: u_bt_sel_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_2";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>, <&u_macro_u_bt_sel_2>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_3: u_macro_u_bt_sel_3 {
            label = "ZM_u_macro_u_bt_sel_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_3: u_bt_sel_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_3";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>, <&u_macro_u_bt_sel_3>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_4: u_macro_u_bt_sel_4 {
            label = "ZM_u_macro_u_bt_sel_4";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_4: u_bt_sel_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_4";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4>, <&u_macro_u_bt_sel_4>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    behaviors {
        u_out_tog: u_out_tog {
            compatible = "zmk,behavior-mod-morph";
            label = "u_out_tog";
            #binding-cells = <0>;
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    behaviors {
        u_caps_word: u_caps_word {
            compatible = "zmk,behavior-mod-morph";
            label = "u_caps_word";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    behaviors {
        u_to_U_BASE: u_to_U_BASE {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_BASE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 1>;
        };
    };
};

/ {
    behaviors {
        u_to_U_EXTRA: u_to_U_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_EXTRA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };
    };
};

/ {
    behaviors {
        u_to_U_TAP: u_to_U_TAP {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };
    };
};

/ {
    behaviors {
        u_to_U_BUTTON: u_to_U_BUTTON {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_BUTTON";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };
    };
};

/ {
    behaviors {
        u_to_U_NAV: u_to_U_NAV {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 5>;
        };
    };
};

/ {
    behaviors {
        u_to_U_MOUSE: u_to_U_MOUSE {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_MOUSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };
    };
};

/ {
    behaviors {
        u_to_U_MEDIA: u_to_U_MEDIA {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 6>;
        };
    };
};

/ {
    behaviors {
        u_to_U_NUM: u_to_U_NUM {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 3>;
        };
    };
};

/ {
    behaviors {
        u_to_U_SYM: u_to_U_SYM {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_SYM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 2>;
        };
    };
};

/ {
    behaviors {
        u_to_U_FUN: u_to_U_FUN {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_FUN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };
    };
};

/ {
    macros {
        u_macro_btn1: u_macro_btn1 {
            label = "ZM_u_macro_btn1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp KP_SLASH &kp KP_N5>;
        };
    };
};

/ {
    macros {
        u_macro_btn2: u_macro_btn2 {
            label = "ZM_u_macro_btn2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp KP_MINUS &kp KP_N5>;
        };
    };
};

/ {
    macros {
        u_macro_btn3: u_macro_btn3 {
            label = "ZM_u_macro_btn3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp KP_ASTERISK &kp KP_N5>;
        };

        u_macro_string_work_email: u_macro_string_work_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp Y &kp E &kp E &kp AT &kp H &kp E &kp A &kp L &kp T &kp H &kp F &kp I &kp R &kp S &kp T &kp DOT &kp O &kp R &kp G>;
            label = "U_MACRO_STRING_WORK_EMAIL";
        };

        u_macro_string_lookforrachel_email: u_macro_string_lookforrachel_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp L &kp O &kp O &kp K &kp F &kp O &kp R &kp DOT &kp R &kp A &kp C &kp H &kp E &kp L &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "U_MACRO_STRING_LOOKFORRACHEL_EMAIL";
        };

        u_macro_string_ctask: u_macro_string_ctask {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(S) &kp E &kp R &kp V &kp E &kp R &kp L &kp E &kp S &kp S &kp SPACE &kp LS(C) &kp LS(D) &kp SPACE &kp D &kp E &kp P &kp L &kp O &kp Y &kp SPACE>;
            label = "U_MACRO_STRING_CTASK";
        };

        u_macro_app_zoom: u_macro_app_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LG(LA(LC(LS(Z))))>;
            label = "U_MACRO_APP_ZOOM";
        };

        u_macro_app_zoom_mic: u_macro_app_zoom_mic {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&u_macro_app_zoom &kp LG(LS(A))>;
            label = "U_MACRO_APP_ZOOM_MIC";
        };

        u_macro_app_zoom_end: u_macro_app_zoom_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(W) &kp ENTER>;
            label = "U_MACRO_APP_ZOOM_END";
            wait-ms = <1000>;
        };

        u_macro_string_ryee: u_macro_string_ryee {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp Y &kp E &kp E>;
            label = "U_MACRO_STRING_RYEE";
        };

        u_macro_string_name: u_macro_string_name {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(R) &kp A &kp C &kp H &kp E &kp L &kp SPACE &kp LS(Y) &kp E &kp E>;
            label = "U_MACRO_STRING_NAME";
        };

        u_macro_select_all_cut: u_macro_select_all_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A) &kp LG(X)>;
            label = "U_MACRO_SELECT_ALL_CUT";
        };

        u_macro_screenshot_clipboard: u_macro_screenshot_clipboard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LG(LC(LS(NUMBER_4)))>;
            label = "U_MACRO_SCREENSHOT_CLIPBOARD";
        };

        u_macro_screenshot_clipb_all: u_macro_screenshot_clipb_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(NUMBER_3)))>;
            label = "U_MACRO_SCREENSHOT_CLIPB_ALL";
        };

        u_macro_screenshot: u_macro_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(NUMBER_4))>;
            label = "U_MACRO_SCREENSHOT";
        };

        u_macro_screenshot_all: u_macro_screenshot_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(NUMBER_3))>;
            label = "U_MACRO_SCREENSHOT_ALL";
        };

        u_macro_select_all_copy: u_macro_select_all_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A) &kp LG(C)>;
            label = "U_MACRO_SELECT_ALL_COPY";
        };

        u_macro_brackets: u_macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "U_MACRO_BRACKETS";
        };

        u_macro_sq_brackets: u_macro_sq_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT_ARROW>;
            label = "U_MACRO_SQ_BRACKETS";
        };

        u_macro_curly_brackets: u_macro_curly_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT_ARROW>;
            label = "U_MACRO_CURLY_BRACKETS";
        };

        u_macro_angled_brackets: u_macro_angled_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT_ARROW>;
            label = "U_MACRO_ANGLED_BRACKETS";
        };

        u_macro_double_quotes: u_macro_double_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "U_MACRO_DOUBLE_QUOTES";
        };

        u_macro_single_quotes: u_macro_single_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT_ARROW>;
            label = "U_MACRO_SINGLE_QUOTES";
        };

        u_macro_undo: u_macro_undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
            label = "U_MACRO_UNDO";
        };

        u_macro_redo: u_macro_redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(Z))>;
            label = "U_MACRO_REDO";
        };

        u_macro_cut: u_macro_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>;
            label = "U_MACRO_CUT";
        };

        u_macro_copy: u_macro_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
            label = "U_MACRO_COPY";
        };

        u_macro_paste: u_macro_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
            label = "U_MACRO_PASTE";
        };

        u_macro_select_all: u_macro_select_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A)>;
            label = "U_MACRO_SELECT_ALL";
        };
    };
};

/ {
    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        u_macro_zoom: u_macro_zoom {
            compatible = "zmk,behavior-hold-tap";
            label = "U_MACRO_ZOOM";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&u_macro_app_zoom>, <&kp>;
        };

        u_macro_zoom_mic: u_macro_zoom_mic {
            compatible = "zmk,behavior-hold-tap";
            label = "U_MACRO_ZOOM_MIC";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&u_macro_app_zoom_mic>, <&kp>;
        };

        u_macro_zoom_end: u_macro_zoom_end {
            compatible = "zmk,behavior-hold-tap";
            label = "U_MACRO_ZOOM_END";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&u_macro_app_zoom_end>, <&kp>;
        };

        u_comma_inner_morph: u_comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_COMMA_INNER_MORPH";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp LEFT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        u_dot_inner_morph: u_dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_DOT_INNER_MORPH";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&kp RIGHT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        u_comma_morph: u_comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&u_comma_inner_morph>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_dot_morph: u_dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&u_dot_inner_morph>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_comma_ctrl_inner_morph: u_comma_ctrl_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_COMMA_CTRL_INNER_MORPH";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LEFT_BRACKET>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        u_dot_ctrl_inner_morph: u_dot_ctrl_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_DOT_CTRL_INNER_MORPH";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBKT>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        u_qmark_slash_morph: u_qmark_slash_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_QMARK_SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp SLASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_dot_ctrl_morph: u_dot_ctrl_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "U_DOT_CTRL_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&u_dot_ctrl_inner_morph>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        u_qmark_tap_kp_hold: u_qmark_tap_kp_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "U_QMARK_TAP_KP_HOLD";
            bindings = <&kp>, <&u_qmark_slash_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <1>;
        };
    };
};
